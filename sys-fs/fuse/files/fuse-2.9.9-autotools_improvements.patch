--- fuse-2.9.9/configure.ac
+++ fuse-2.9.9/configure.ac
@@ -1,27 +1,30 @@
-AC_INIT(fuse, 2.9.9)
+AC_INIT([fuse],[2.9.9])
 
-AC_PREREQ(2.59d)
+AC_PREREQ([2.69])
 AC_CONFIG_MACRO_DIR([m4])
 AC_CANONICAL_TARGET
 AM_INIT_AUTOMAKE([foreign])
 m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES(yes)])
 AC_CONFIG_HEADERS(include/config.h)
 
-AC_PROG_LIBTOOL
+AM_GNU_GETTEXT(external)
+AM_GNU_GETTEXT_VERSION(0.22)
+
+LT_INIT
 AC_PROG_CC
 AC_PROG_MKDIR_P
 AM_PROG_CC_C_O
 
-case $target_os in
-     *linux*)	arch=linux;;
-     *netbsd*)  arch=netbsd;;
-     *bsd*)	arch=bsd;;
-     *)		arch=unknown;;
-esac
+AS_CASE([$target_os],
+     [*linux*],	 [arch=linux],
+     [*netbsd*], [arch=netbsd],
+     [*bsd*],	 [arch=bsd],
+     [*],	 [arch=unknown]
+)
 
-if test "$ac_env_CFLAGS_set" != set; then
+AS_IF([test "$ac_env_CFLAGS_set" != set], [
 	CFLAGS="-Wall -W -Wno-sign-compare -Wstrict-prototypes -Wmissing-declarations -Wwrite-strings -g -O2 -fno-strict-aliasing"
-fi
+])
 
 AC_ARG_ENABLE(lib,
 	[  --enable-lib            Compile with library ])
@@ -40,18 +43,18 @@
 
 subdirs2="include"
 
-if test "$enable_lib" != "no"; then
+AS_IF([test "$enable_lib" != "no"], [
 	subdirs2="$subdirs2 lib";
-fi
-if test "$arch" = linux -a "$enable_util" != "no"; then
+])
+AS_IF([test "$arch" = linux -a "$enable_util" != "no"], [
 	subdirs2="$subdirs2 util";
-fi
-if test "$enable_example" != "no"; then
+])
+AS_IF([test "$enable_example" != "no"], [
 	subdirs2="$subdirs2 example";
-fi
-if test "$enable_mtab" = "no"; then
+])
+AS_IF([test "$enable_mtab" = "no"], [
 	AC_DEFINE(IGNORE_MTAB, 1, [Don't update /etc/mtab])
-fi
+])
 
 AC_CHECK_FUNCS([fork setxattr fdatasync splice vmsplice utimensat])
 AC_CHECK_FUNCS([posix_fallocate])
@@ -76,20 +79,20 @@
 AM_CONDITIONAL(ICONV, test "$am_cv_func_iconv" = yes)
 AC_SUBST(libfuse_libs)
 
-if test -z "$MOUNT_FUSE_PATH"; then
+AS_IF([test -z "$MOUNT_FUSE_PATH"], [
 	MOUNT_FUSE_PATH=/sbin
 	AC_MSG_NOTICE([MOUNT_FUSE_PATH env var not set, using default $MOUNT_FUSE_PATH])
-fi
+])
 AC_SUBST(MOUNT_FUSE_PATH)
-if test -z "$UDEV_RULES_PATH"; then
+AS_IF([test -z "$UDEV_RULES_PATH"], [
 	UDEV_RULES_PATH=/etc/udev/rules.d
 	AC_MSG_NOTICE([UDEV_RULES_PATH env var not set, using default $UDEV_RULES_PATH])
-fi
+])
 AC_SUBST(UDEV_RULES_PATH)
-if test -z "$INIT_D_PATH"; then
+AS_IF([test -z "$INIT_D_PATH"], [
 	INIT_D_PATH=/etc/init.d
 	AC_MSG_NOTICE([INIT_D_PATH env var not set, using default $INIT_D_PATH])
-fi
+])
 AC_SUBST(INIT_D_PATH)
 
 AC_SUBST(subdirs2)
@@ -99,30 +102,31 @@
 AM_CONDITIONAL(BSD, test "$arch" = bsd)
 
 util_linux_ok=yes
-if test "$arch" = linux -a "$cross_compiling" != "yes"; then
+AS_IF([test "$arch" = linux -a "$cross_compiling" != "yes"], [
 	AC_MSG_CHECKING([if umount supports --fake --no-canonicalize])
 	# exit code of umount is 1 if option is unrecognised, 2 otherwise
 	true --fake --no-canonicalize > /dev/null 2>&1
-	if test $? != 1; then
+	umount_retval=$?
+	AS_IF([test "$umount_retval" != 1], [
 		AC_MSG_RESULT([yes])
-	else
+	], [
 		firstline=`true --fake --no-canonicalize 2>&1 | head -1`
-		if test "$firstline" = 'umount: only root can use "--fake" option'; then
+		AS_IF([test "$firstline" = 'umount: only root can use "--fake" option'], [
 			AC_MSG_RESULT([yes])
-		else
+		], [
 			AC_MSG_RESULT([$firstline])
 			util_linux_ok=no
-		fi
-	fi
-fi
+		])
+	])
+])
 
 AC_CONFIG_FILES([fuse.pc Makefile lib/Makefile util/Makefile example/Makefile include/Makefile doc/Makefile])
 AC_OUTPUT
 
-if test "$util_linux_ok" = no; then
+AS_IF([test "$util_linux_ok" = no], [
 	AC_MSG_WARN([
 ******************************************************************
 * Please install util-linux version 2.18 or later which supports *
 * --fake and --no-canonicalize options in mount and umount       *
 ******************************************************************])
-fi
+])
